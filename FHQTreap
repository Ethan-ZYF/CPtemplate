mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
template <typename T = int>
struct FHQTreap {
    struct Node {
        T key;
        int val, size;
        Node *lc, *rc;
        Node(const T& k, const int& v) : key(k), val(v), size(1), lc(nullptr), rc(nullptr) {}
    }* root;
    int sz(Node* const& x) {
        return x ? x->size : 0;
    }
    void push_up(Node* const& x) {
        x->size = 1 + sz(x->lc) + sz(x->rc);
    }

    Node* merge(Node* const& a, Node* const& b) {
        if (!a || !b) return a ? a : b;
        if (a->val < b->val) {
            a->rc = merge(a->rc, b);
            push_up(a);
            return a;
        } else {
            b->lc = merge(a, b->lc);
            push_up(b);
            return b;
        }
    }
    void split(Node* const rt, Node*& a, Node*& b, const T& key) {
        // 这里一定要传值。
        if (!rt) {
            a = b = nullptr;
        } else if (rt->key >= key) {
            b = rt;
            split(rt->lc, a, rt->lc, key);
        } else {
            a = rt;
            split(rt->rc, rt->rc, b, key);
        }
        if (rt) push_up(rt);
    }
    T* getKth(Node* const& rt, const int& x) {
        if (!rt) return nullptr;
        int tmp = sz(rt->lc) + 1;
        if (x < tmp) {
            return getKth(rt->lc, x);
        } else if (x > tmp) {
            return getKth(rt->rc, x - tmp);
        } else
            return &rt->key;
    }

    FHQTreap() : root(nullptr) {}
    T* getKth(const int& x) {
        return getKth(root, x);
    }
    int rank(const T& x) {
        Node *a, *b;
        a = b = nullptr;
        split(root, a, b, x);
        int tmp = sz(a);
        root = merge(a, b);
        return tmp + 1;
    }
    void insert(const T& k, const int& v = rng()) {
        Node *a, *b;
        a = b = nullptr;
        split(root, a, b, k);
        root = merge(a, merge(new Node(k, v), b));
    }
    void remove(const T& x) {
        Node *a, *b, *c, *tmp;
        a = b = c = tmp = nullptr;
        split(root, a, tmp, x);
        split(tmp, b, c, x + 1);
        // tmp = b;
        b = merge(b->lc, b->rc);
        // delete tmp;
        root = merge(a, merge(b, c));
    }
    T* findPrev(const T& k) {
        int vnr = rank(k);
        T* tmp = getKth(vnr);
        return tmp && *tmp < k ? tmp : getKth(vnr - 1);
    }
    T* findNext(const T& k) {
        int vnr = rank(k + 1);
        T* tmp = getKth(vnr);
        return tmp && *tmp > k ? tmp : getKth(vnr + 1);
    }
};